using AutoMapper;
using MovieNewMVC.Dtos;
using MovieNewMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Data.Entity;

namespace MovieNewMVC.Controllers.Api
{
    public class CustomersController : ApiController
    {
        private ApplicationDbContext _contaxt;
        public CustomersController()
        {
            _contaxt = new ApplicationDbContext();
        }
        //GET /api/customers
        //public IEnumerable<Customer> GetCustomers()
        public IEnumerable<CustomerDto> GetCustomers()
        {
            //return _contaxt.Customers.ToList();
            return _contaxt.Customers.Include(c => c.MembershipType).ToList().Select(Mapper.Map<Customer, CustomerDto>);
        }
        //GET /api/customers/1
        //public Customer GetCustomer(int id)
        public CustomerDto GetCustomer(int id)
        {
            //var customer = _contaxt.Customers.SingleOrDefault(c => c.Id == id);
            var customer = _contaxt.Customers.Include(c => c.MembershipType).SingleOrDefault(c => c.Id == id);

            if (customer == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);
            //return customer;
            return Mapper.Map<Customer, CustomerDto>(customer); // change return type to CustomerDto 
        }
        // POST /api/customers
        [HttpPost]
        // change Customer to CustomerDto
        public CustomerDto CreateCustomer(CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
                throw new HttpResponseException(HttpStatusCode.BadRequest);
            var customer = Mapper.Map<CustomerDto,Customer>(customerDto)    ;
            _contaxt.Customers.Add(customer); // now this customer object has an ID that is generated by the database   
            _contaxt.SaveChanges();

            // we want to add this ID in our DTO and return it to the client 
            customerDto.Id = customer.Id; 

            return customerDto;
        }
        // PUT /api/customers/1
        [HttpPut]
        //public void UpdateCustomer(int id, Customer customer)
        public void UpdateCustomer(int id, CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
                throw new HttpResponseException(HttpStatusCode.BadRequest);
            var custInDb = _contaxt.Customers.SingleOrDefault(c => c.Id == id);
            if (custInDb == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);

            // use mapper
            Mapper.Map<CustomerDto ,Customer>(customerDto, custInDb);
            
            //custInDb.Name = customerDto.Name; // change customer to customerDto
            //custInDb.Birthdate = customerDto.Birthdate;
            //custInDb.MembershipId = customerDto.MembershipId;
            //custInDb.IsSunscribedToNewsletter = customerDto.IsSunscribedToNewsletter;

            _contaxt.SaveChanges();

        }
        // DELETE /api/customers/1
        [HttpDelete]
        public void DeleteCustomer(int id)
        {
            var custInDb = _contaxt.Customers.SingleOrDefault(c => c.Id == id);
            if (custInDb == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);
            _contaxt.Customers.Remove(custInDb);
            _contaxt.SaveChanges();
        }
    }
}
